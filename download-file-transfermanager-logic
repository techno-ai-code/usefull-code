from fastapi import FastAPI, HTTPException
from fastapi.responses import StreamingResponse
from botocore.exceptions import ClientError
import boto3
import logging
import os

app = FastAPI()

# Define your bucket name
BUCKET_NAME = "your-bucket-name"

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to get S3 client
def get_s3_client():
    return boto3.client('s3')

@app.get("/download")
def download_file(object_name: str):
    try:
        s3_client = get_s3_client()

        # Create a temporary file to store the downloaded object
        temp_file_path = f"/tmp/{object_name}"  # Use a temporary directory
        logger.info(f"Downloading {object_name} to {temp_file_path}")

        # Use TransferManager to download the file in parallel
        transfer = boto3.s3.transfer.S3Transfer(s3_client)

        # Download the file
        transfer.download_file(BUCKET_NAME, object_name, temp_file_path)

        # Generator function to stream the file in chunks
        def file_iterator():
            with open(temp_file_path, "rb") as file:
                while chunk := file.read(8192):  # Read in 8 KB chunks
                    yield chunk
            # Clean up the temporary file after streaming
            os.remove(temp_file_path)
            logger.info(f"Deleted temporary file: {temp_file_path}")

        # Return the file as a streaming response
        return StreamingResponse(
            file_iterator(),
            media_type='application/octet-stream',
            headers={
                "Content-Disposition": f"attachment; filename={object_name}",
            },
            timeout=300  # Increase timeout to 300 seconds (5 minutes)
        )
    except ClientError as e:
        # Handle S3-specific errors (e.g., file not found)
        raise HTTPException(status_code=404, detail=f"File not found: {str(e)}")
    except Exception as e:
        # Handle other unexpected errors
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")
